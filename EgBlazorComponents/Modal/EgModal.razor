@using EgBlazorComponents.Args
@typeparam TItem where TItem : class

@if (isVisible)
{
	<CascadingValue Value="@ModalArgs">
		<CascadingValue Value="@OnCloseRequested">
			<div class="modal" tabindex="-1" data-bs-backdrop="static" style="display:block;">
				<div class="modal-dialog">
					<div class="modal-content">
						<div class="modal-header">
							<h5 class="modal-title">@title</h5>
							<button type="button" class="btn-close" aria-label="Close" @onclick="@(_ => OnCloseButtonClicked(ModalResult.Cancel))"></button>
						</div>
						<div class="modal-body">
							@content
						</div>
						@footer
					</div>
				</div>
			</div>
			<div class="modal-backdrop fade show" />
		</CascadingValue>
	</CascadingValue>
}

@code
{
	[Parameter] public ModalArgs<TItem> ModalArgs { get; set; }

	private EventCallback<ModalResult> OnCloseRequested;
	private bool isVisible;
	private string title;
	private RenderFragment content = default!;
	private RenderFragment footer;
	private TaskCompletionSource<ModalResult> tcs;

	public Task<ModalResult> ShowAsync<T>(string title, ModalArgs<TItem> args) where T: class
	{
		this.title = title;
		ModalArgs = args;
		OnCloseRequested = EventCallback.Factory.Create<ModalResult>(this, OnCloseButtonClicked);

		footer = args.ModalButtons == ModalButtons.None ? null : builder =>
		{
			builder.OpenElement(0, "div");
			builder.AddAttribute(1, "class", "modal-footer");

			if (args.ModalButtons is ModalButtons.Ok or ModalButtons.OkCancel or ModalButtons.Yes or ModalButtons.YesNo)
			{
				builder.OpenElement(0, "button");
				builder.AddAttribute(1, "type", "button");
				builder.AddAttribute(2, "class", "btn btn-primary");
				builder.AddAttribute(3, "onclick", EventCallback.Factory.Create(this, _ =>
					OnCloseButtonClicked(args.ModalButtons is ModalButtons.Ok or ModalButtons.OkCancel ? ModalResult.Ok : ModalResult.Yes)));
				builder.AddContent(4, args.ModalButtons is ModalButtons.Ok or ModalButtons.OkCancel ? "OK" : "Yes");
				builder.CloseElement();
			}

			if (args.ModalButtons is ModalButtons.OkCancel or ModalButtons.YesNo)
			{
				builder.OpenElement(5, "button");
				builder.AddAttribute(6, "type", "button");
				builder.AddAttribute(7, "class", "btn btn-secondary");
				builder.AddAttribute(8, "onclick", EventCallback.Factory.Create(this, _ =>
					OnCloseButtonClicked(args.ModalButtons is ModalButtons.Ok or ModalButtons.OkCancel ? ModalResult.Cancel : ModalResult.No)));
				builder.AddContent(9, args.ModalButtons is ModalButtons.OkCancel ? "Cancel" : "No");
				builder.CloseElement();
			}
			builder.CloseElement();
		};

		content = builder =>
		{
			builder.OpenComponent(10, typeof(T));
			builder.CloseComponent();
		};

		isVisible = true;
		tcs = new TaskCompletionSource<ModalResult>();
		return tcs.Task;
	}

	private void OnCloseButtonClicked(ModalResult modalResult)
	{
		tcs.TrySetResult(modalResult);
		isVisible = false;
	}
}
